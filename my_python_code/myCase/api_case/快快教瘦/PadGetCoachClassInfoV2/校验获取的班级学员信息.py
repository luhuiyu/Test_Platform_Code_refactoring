#!/usr/bin/env python# coding=utf-8import my_python_code.myCase.api_case.interface.login_argsfrom imp import reloadimport logging,timeimport json,pymysqllogging.basicConfig(level=logging.INFO)from my_python_code.myCase.api_case.interface.Basics_class import Basics_case, get_errorfrom  my_python_code.myCase.api_case.interface.接口记录 import *from  my_python_code.mysql.ORM_of_mysql import orm_to_mysqlfrom my_python_code.mysql.Basic_information import my_sql_link_test,my_sql_linktrue=Truefalse=Falseclass API_case(Basics_case):      def __init__(self):        self.API_name =  获取当前班级的学员信息        self.orm = orm_to_mysql(my_sql_link())        Basics_case.__init__(self)  # 子类中含有__init__时，不会自动调用父类__init__，如需使用父类__init__中的变量，则需要在子类__init__中显式调用      def test_case(self):  # 对比和 web_platform_pad_pesourcelist 保存的数据是否一致          heard = self.login()          error_list = []          sgin = True          all_case_json = self.orm.table('web_platform_comparison_library').select(api_name=self.API_name).all()          if len(all_case_json) == 0: return {"result": -1, "error_info": 'not case'}          for x in all_case_json:              rult = {'id': x['id']}              case_rult = self.client.post(url=self.API_url(), json=eval(x['send_json']), headers=heard)              print(int(case_rult.status_code))              if not case_rult.status_code == int(x['status_code']):                  rult["error_info"] = case_rult.status_code                  rult['result'] = '0'                  sgin = False              if sgin:                  if eval(x['receive_json'])=={}:                      pass                  else:                      try:                          new_json=case_rult.json()                          receive_json=eval(x['receive_json'])                          if not   new_json['classInfo']['classesId']== receive_json['classInfo']['classesId']:                              rult["error_info"] =new_json                              rult['result'] = '0'                              sgin = False                      except:                          rult["error_info"] = "JSON  is not in  "                          rult['result'] = '0'                          sgin = False              if 'result'  in rult.keys(): error_list.append(rult)          self.orm.close()          if sgin: return {"result": 1}          else:return {"result": 0, "error_info": error_list}if __name__ == '__main__':    example = API_case()    print(example.test_case())    #example.tset()